#!/usr/bin/env bash
# Summary: Setup virtualenvwrapper into current shell.
#
# Usage: pyenv virtualenvwrapper

set -e
[ -n "$PYENV_DEBUG" ] && set -x

lib() {
  pyenv_virtualenvwrapper_load() {
    local version="$(pyenv version-name)"
    local STATUS=0
    if [[ "${PYENV_VIRTUALENVWRAPPER_PYENV_VERSION}" != "${version}" ]]; then
      unset PYENV_VIRTUALENVWRAPPER_PYENV_VERSION
      pyenv which virtualenvwrapper.sh 1>/dev/null 2>&1 || (
        local VIRTUALENVWRAPPER_VERSION="==${VIRTUALENVWRAPPER_VERSION}"

        unset PIP_REQUIRE_VENV
        unset PIP_REQUIRE_VIRTUALENV

        pyenv exec pip install $QUIET $VERBOSE "virtualenvwrapper${VIRTUALENVWRAPPER_VERSION%==}" 1>&2
      )
      export VIRTUALENVWRAPPER_SCRIPT="$(pyenv which virtualenvwrapper.sh 2>/dev/null || true)"
      export VIRTUALENVWRAPPER_LAZY_SCRIPT="$(pyenv which virtualenvwrapper_lazy.sh 2>/dev/null || true)"
      if [ ! -x "${VIRTUALENVWRAPPER_SCRIPT}" ] || [ ! -x "${VIRTUALENVWRAPPER_LAZY_SCRIPT}" ]; then
        echo "pyenv-virtualenvwrapper: ${version}: virtualenvwrapper is not available." 1>&2
        STATUS=1
      fi

      export VIRTUALENVWRAPPER_VIRTUALENV_CLONE="$(pyenv which virtualenv-clone 2>/dev/null || true)"
      if [ ! -x "${VIRTUALENVWRAPPER_VIRTUALENV_CLONE}" ]; then
        echo "pyenv-virtualenvwrapper: ${version}: virtualenv-clone is not available." 1>&2
        STATUS=1
      fi

      export VIRTUALENVWRAPPER_VIRTUALENV="$(pyenv which virtualenv 2>/dev/null || true)"
      if [ ! -x "${VIRTUALENVWRAPPER_VIRTUALENV}" ]; then
        echo "pyenv-virtualenvwrapper: ${version}: virtualenv is not available." 1>&2
        STATUS=1
      fi

      export VIRTUALENVWRAPPER_PYTHON="$(pyenv which python 2>/dev/null || true)"
      if [ ! -x "${VIRTUALENVWRAPPER_PYTHON}" ]; then
        echo "pyenv-virtualenvwrapper: ${version}: python is not available." 1>&2
        STATUS=1
      fi
    fi
    export PYENV_VIRTUALENVWRAPPER_PYENV_VERSION="${version}"
    return "$STATUS"
  }

  pyenv_virtualenvwrapper_verify_resource() {
    if [ "$1" = "${1##*/}" ]; then
      if pyenv which "$1" >/dev/null 2>&1; then
        return 0
      fi
    else
      if [ -e "$1" ]; then
        return 0
      fi
    fi
    echo "pyenv-virtualenvwrapper: could not find $1 in your path" 1>&2
    return 1
  }

  virtualenvwrapper_load() {
    pyenv_virtualenvwrapper_load || return 1
    source "$VIRTUALENVWRAPPER_SCRIPT"

    # preserve original virtualenvwrapper_verify_workon_home
    eval "$(echo "pyenv_virtualenvwrapper_verify_workon_home() {";{ declare -f virtualenvwrapper_verify_workon_home 2>/dev/null || printf "f() {\ntrue;}\n";} | tail -n +2 | sed '/^{ *$/d')"
    virtualenvwrapper_verify_workon_home() {
      pyenv_virtualenvwrapper_load || return 1
      pyenv_virtualenvwrapper_verify_workon_home "$@"
    }

    # override virtualenvwrapper_verify_resource
    virtualenvwrapper_verify_resource() {
      pyenv_virtualenvwrapper_load || return 1
      pyenv_virtualenvwrapper_verify_resource "$@"
    }
  }

  pyenv_virtualenvwrapper_init() {
    local vars=(PYTHON VIRTUALENV VIRTUALENV_CLONE SCRIPT LAZY_SCRIPT)
    pyenv_virtualenvwrapper_load || {
      echo "unset PYENV_VIRTUALENVWRAPPER_PYENV_VERSION"
      return 1
    }
    echo "export PYENV_VIRTUALENVWRAPPER_PYENV_VERSION=\"${PYENV_VIRTUALENVWRAPPER_PYENV_VERSION}\""
    for name in "${vars[@]}"; do
      var="VIRTUALENVWRAPPER_${name}"
      echo "export ${var}=\"${!var}\""
    done
    declare -f pyenv_virtualenvwrapper_load
    declare -f pyenv_virtualenvwrapper_verify_resource
  }

  if [ "$1" == "--$FUNCNAME" ]; then
    declare -f "$FUNCNAME"
    echo "$FUNCNAME \"\$1\";"
    exit
  fi
}
lib "$1"

{ printf "\x1B[31;1m"
  echo
  echo "Failed to initialize virtualenvwrapper."
  echo
  echo "Perhaps pyenv-virtualenvwrapper has not been loaded into your shell properly."
  echo "Please restart current shell and try again."
  echo
  printf "\x1B[0m"
} 1>&2
exit 1
