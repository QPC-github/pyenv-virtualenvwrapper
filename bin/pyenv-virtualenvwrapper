#!/usr/bin/env bash
# Summary: Setup virtualenvwrapper into current shell.
#
# Usage: pyenv virtualenvwrapper

set -e
[ -n "$PYENV_DEBUG" ] && set -x

PYENV_VIRTUALENVWRAPPER_VERSION="20140122"

lib() {
  pyenv_virtualenvwrapper_load() {
    local version="$(pyenv version-name)"
    if [[ "${PYENV_VIRTUALENVWRAPPER_PYENV_VERSION}" != "${version}" ]]; then
      unset PYENV_VIRTUALENVWRAPPER_PYENV_VERSION

      local prefix="$(pyenv prefix "${version%%:*}" 2>/dev/null || true)"
      if [ ! -d "${prefix}" ]; then
        echo "pyenv-virtualenvwrapper: no such directory: ${prefix}" 1>&2
        return 1
      fi

      export VIRTUALENVWRAPPER_SCRIPT="${prefix}/bin/virtualenvwrapper.sh"
      [ -f "${VIRTUALENVWRAPPER_SCRIPT}" ] || {
        export VIRTUALENVWRAPPER_SCRIPT="$(pyenv which virtualenvwrapper.sh 2>/dev/null || true)"
        [ -f "${VIRTUALENVWRAPPER_SCRIPT}" ] || {
          ( local VIRTUALENVWRAPPER_VERSION="==${VIRTUALENVWRAPPER_VERSION}"
            unset PIP_REQUIRE_VENV
            unset PIP_REQUIRE_VIRTUALENV
            pyenv exec pip install $QUIET $VERBOSE "virtualenvwrapper${VIRTUALENVWRAPPER_VERSION%==}"
          ) 1>&2
          export VIRTUALENVWRAPPER_SCRIPT="$(pyenv which virtualenvwrapper.sh 2>/dev/null || true)"
          [ -f "${VIRTUALENVWRAPPER_SCRIPT}" ] || {
            echo "pyenv-virtualenvwrapper: ${version}: virtualenvwrapper.sh is not available." 1>&2
            return 1
          }
        }
      }

      export VIRTUALENVWRAPPER_LAZY_SCRIPT="${prefix}/bin/virtualenvwrapper_lazy.sh"
      [ -f "${VIRTUALENVWRAPPER_LAZY_SCRIPT}" ] || {
        export VIRTUALENVWRAPPER_LAZY_SCRIPT="$(pyenv which virtualenvwrapper_lazy.sh 2>/dev/null || true)"
        [ -f "${VIRTUALENVWRAPPER_LAZY_SCRIPT}" ] || {
          echo "pyenv-virtualenvwrapper: ${version}: virtualenvwrapper_lazy.sh is not available." 1>&2
          return 1
        }
      }

      export VIRTUALENVWRAPPER_VIRTUALENV_CLONE="${prefix}/bin/virtualenv-clone"
      [ -x "${VIRTUALENVWRAPPER_VIRTUALENV_CLONE}" ] || {
        export VIRTUALENVWRAPPER_VIRTUALENV_CLONE="$(pyenv which virtualenv-clone 2>/dev/null || true)"
        [ -x "${VIRTUALENVWRAPPER_VIRTUALENV_CLONE}" ] || {
          echo "pyenv-virtualenvwrapper: ${version}: virtualenv-clone is not available." 1>&2
          return 1
        }
      }

      export VIRTUALENVWRAPPER_VIRTUALENV="${prefix}/bin/virtualenv"
      [ -x "${VIRTUALENVWRAPPER_VIRTUALENV}" ] || {
        export VIRTUALENVWRAPPER_VIRTUALENV="$(pyenv which virtualenv 2>/dev/null || true)"
        [ -x "${VIRTUALENVWRAPPER_VIRTUALENV}" ] || {
          echo "pyenv-virtualenvwrapper: ${version}: virtualenv is not available." 1>&2
          return 1
        }
      }

      export VIRTUALENVWRAPPER_PYTHON="${prefix}/bin/python"
      [ -x "${VIRTUALENVWRAPPER_PYTHON}" ] || {
        export VIRTUALENVWRAPPER_PYTHON="$(pyenv which python 2>/dev/null || true)"
        [ -x "${VIRTUALENVWRAPPER_PYTHON}" ] || {
          echo "pyenv-virtualenvwrapper: ${version}: python is not available." 1>&2
          return 1
        }
      }
    fi
    export PYENV_VIRTUALENVWRAPPER_PYENV_VERSION="${version}"
  }

  pyenv_virtualenvwrapper_verify_resource() {
    if [ "$1" = "${1##*/}" ]; then
      if pyenv which "$1" >/dev/null 2>&1; then
        return 0
      fi
    else
      if [ -e "$1" ]; then
        return 0
      fi
    fi
    echo "pyenv-virtualenvwrapper: could not find $1 in your path" 1>&2
    return 1
  }

  virtualenvwrapper_load() {
    pyenv_virtualenvwrapper_load || return 1
    source "$VIRTUALENVWRAPPER_SCRIPT"

    # preserve original virtualenvwrapper_verify_workon_home
    eval "$(echo "pyenv_virtualenvwrapper_verify_workon_home() {";{ declare -f virtualenvwrapper_verify_workon_home 2>/dev/null || printf "f() {\ntrue;}\n";} | tail -n +2 | sed '/^{ *$/d')"
    virtualenvwrapper_verify_workon_home() {
      pyenv_virtualenvwrapper_load || return 1
      pyenv_virtualenvwrapper_verify_workon_home "$@"
    }

    # override virtualenvwrapper_verify_resource
    virtualenvwrapper_verify_resource() {
      pyenv_virtualenvwrapper_load || return 1
      pyenv_virtualenvwrapper_verify_resource "$@"
    }
  }

  pyenv_virtualenvwrapper_init() {
    pyenv_virtualenvwrapper_load || {
      echo "unset PYENV_VIRTUALENVWRAPPER_PYENV_VERSION"
      return 1
    }
    echo "export PYENV_VIRTUALENVWRAPPER_PYENV_VERSION=\"${PYENV_VIRTUALENVWRAPPER_PYENV_VERSION}\""

    echo "export VIRTUALENVWRAPPER_PYTHON=\"${VIRTUALENVWRAPPER_PYTHON}\""
    echo "export VIRTUALENVWRAPPER_VIRTUALENV=\"${VIRTUALENVWRAPPER_VIRTUALENV}\""
    echo "export VIRTUALENVWRAPPER_VIRTUALENV_CLONE=\"${VIRTUALENVWRAPPER_VIRTUALENV_CLONE}\""
    echo "export VIRTUALENVWRAPPER_SCRIPT=\"${VIRTUALENVWRAPPER_SCRIPT}\""
    echo "export VIRTUALENVWRAPPER_LAZY_SCRIPT=\"${VIRTUALENVWRAPPER_LAZY_SCRIPT}\""

    declare -f pyenv_virtualenvwrapper_load
    declare -f pyenv_virtualenvwrapper_verify_resource
  }

  if [ "$1" == "--$FUNCNAME" ]; then
    declare -f "$FUNCNAME"
    echo "$FUNCNAME \"\$1\";"
    exit
  fi
}
lib "$1"

virtualenvwrapper_version() {
  local info="$(pyenv exec pip show virtualenvwrapper 2>/dev/null || true)"
  local version="$(echo "${info}" | grep 'Version:' | head -n 1 || true)"
  version="${version##Version: }"
  echo "${version:-unknown}"
}

if [ "$1" == "--version" ]; then
  echo "pyenv-virtualenvwrapper ${PYENV_VIRTUALENVWRAPPER_VERSION} (virtualenvwrapper $(virtualenvwrapper_version))"
  exit
fi

{ printf "\x1B[31;1m"
  echo
  echo "Failed to initialize virtualenvwrapper."
  echo
  echo "Perhaps pyenv-virtualenvwrapper has not been loaded into your shell properly."
  echo "Please restart current shell and try again."
  echo
  printf "\x1B[0m"
} 1>&2
exit 1
